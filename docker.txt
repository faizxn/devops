 container	> is a instance of image.
 image		> download from docker hub.

/var/lib/docker/

 builder  buildkit  containers  image  network  overlay2  plugins  runtimes  swarm  tmp  trust  volumes


# starting container ---------------------------------------

 docker image pull hello-world
 docker pull ubuntu:14.04
 
 docker image ls 	

 docker container run ubuntu/nginx
 docker container run ubuntu sleep 30           	                        
 docker container ls 									                  
 docker container ls -a              					                   
 docker ps 
 
 docker container logs <con-id>							                   


# container in background(start|stop|detach) ----------------

 docker container run -d nginx							                                                         
 docker container stop  <con-id>
 docker container start  <con-id>
 docker container restart <con-id>

 docker container run -d --name nginx-node-one nginx	                                         
 docker container run -d --name nginx-node-two nginx

 docker container run -it nginx /bin/bash				                                                  
 docker exec -it <con-id> /bin/bash						                                                      

 ctrl p+q 												|| leave bash without stopping container 
 
 docker container rm <con-id>
 docker container prune 							                                                               
 
 docker container ls -aq 								|| print all containers id 
 docker container rm $(docker container ls -aq) 		                                            
 
 docker container inspect <con-id>						                                      



# container-log-starts-top --------------------------------

 ps -aux | grep nginx                                   || both host-machine and container has same process id

 docker container top 3be2f959e6a
 docker container top 1c973430b1

 docker container logs 3be2f959e6a					                                                       
 docker container stats									                                      



# container port-mapping rename ---------------------------

 docker container rename <exiting-name>  <new-name>			
 docker container run -d -p 8080:80 --name nginx-node-port-mapped nginx        			           	
 docker container run -d -p 80:80 nginx

 docker update --restart unless-stopped <con-id>		|| used to boot container after reboot container-machine
 docker container run -d  --restart unless-stopped   -p 80:80 --name mynginx  nginx



# container attach -kill-pause-port ------------------------

 docker container attach <con-id>					     || display input..output..error stream message
 docker container kill <con-id>					         || stop attempts to trigger a graceful shutdown by sending the standard signal                                                                                                    terminal SIGTERM, whereas kill just kills the proces by default.
 docker container puase| unpause <con-id>
 docker container port <con-id>					                                                       



# container create.. diff.. copy file to container -----------


 -diff > its inspect changes to files or directories on a containers filesystem.

 docker container create ubuntu sleep 60
 docker container run <con-id>										               
 docker container diff <con-id>					         || open another terminal [watch 'docker conatiner diff  [con-id]'.. see what                                                                                                     chages is occured]

 docker container cp /host-machine-files/  <con-id>:/files-location   	                 




# container export-import ----------------------------------


 docker container run -it ubuntu /bin/bash

 apt-get -y update
 apt-get install -y tree git

 docker container export 43fbs456 > my_ubuntu_tree_git.tar				                            
 docker container export 43fbs456 -o  my_ubuntu_tree_git.tar

 docker image import  my_ubuntu_tree_git.tar my_ubutnu_img
 docker image ls
 docker container run -it my_ubutnu_img /bin/bash

 git --version
 tree

 docker container ls


# create docker-image from running container ----------------

 docker container run -it ubuntu bash
 cd /tmp    -> mkdir {1..100} ->
 
 docker container commit --author "Faiz" -m "MyUbuntu" <b7caa43a2d15>   <my_ubuntu_img>
 docker image ls
 
 docker container run -it my_ubuntu_img  bash
 docker container ls


# docker push image to hub and add tag ------------------------

 docker image ls
 docker login 														                                                             
 
 docker image tag my_ubuntu_img  faizxn/my_ubuntu_custom_file
 docker push  faizxn/my_ubuntu_custom_file
 
 docker image pull nginx
 docker image ls
 docker image tag nginx faizxn/nginx
 docker push  faizxn/nginx



# docker history and filtering-inspect --------------------------

 docker image history nginx
 docker image ls --format '{{'.ID'}}, {{.Tag}}'
 docker image ls --format '{{'.ID'}}, {{.Tag}} - {{.Repository}}'

 ba4bfdc0c69f,   latest - faizxn/my_ubuntu_custom_file
 ba4bfdc0c69f,   latest - my_ubuntu_img
 74435f89ab78,  latest - ubuntu
 2622e6cca7eb,  latest - nginx



 # docker image save..load ----------------------------------------

 export	> is used to export the container’s file system into a tar file. it doesn’t export any volumes associated with it.
 save	> is used to save one or more images into a tar file with layer.

<!---- save and export are both used for sharing tar files. but, save is used for images and can save multiple images into a tar file with all the layers and history -->

 docker image save nginx > nginx.tar
 ls
 
 docker image load < nginx.tar
 docker image ls



 # docker arhitecture layer and dockerfile -------------------------






# docker network ---------------------------------------------------

bridge-network : we can multiple bridge network and attach it to containers
host-network : this only allow for once at container. everything is isolated except network. it behave exact like host machine ip address.
none-network : this is used if we dont want any ip address to containers.

network-dns : manually created bridge network dns is enabled by default.

docker network connect/disconnect <network-name> <container-id>           || to add addtional container network.. we can multiple bridge networks to containers. 




